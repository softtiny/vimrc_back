" line numbers
set number

" When unloading a buffer Vim normally destroys the tree of undos created for
" that buffer.  By setting the 'undofile' option, Vim will automatically save
" your undo history when you write a file and restore undo history when you edit
" the file again.
set undofile

" How to view UTF-8 Characters in VIM or Gvim
set fileencodings=utf-8,gbk,utf-16le,cp1252,iso-8859-15,ucs-bom
set termencoding=utf-8
set encoding=utf-8
set fileformats=unix,dos,mac

if has("unix")
    language messages C.UTF-8
endif

" fu! SaveSess()
    " execute 'mksession! ' . g:rootTmpPath . '/.session.vim'
" endfunction
" 
" fu! RestoreSess()
" if filereadable(g:rootTmpPath .'/.session.vim')
    " execute 'so '.g:rootTmpPath.'/.session.vim'
    " if bufexists(1)
        " for l in range(1, bufnr('$'))
            " if bufwinnr(l) == -1
                " exec 'badd ' . l
            " endif
        " endfor
    " endif
" endif
" endfunction
" That will litter your directories with .vim s, but you can easily modify that. Also, change sbuffer to badd if you don't want new windows for each file and add " ssop-=buffers to your vimrc.
" set sessionoptions-=buffers
" autocmd VimLeave * call SaveSess()
" autocmd VimEnter * nested call RestoreSess()


if has("gui_running") 
	" let's maximize the gvim window 
	set lines=99999 columns=99999 
else 
	" this is console vim 
	" console vim can never change its font 
	" not every console vim can resize itself 
	" if exists("+lines") 
		" set lines=90 
	" endif 
	" if exists("+columns") 
		" set columns=90 
	" endif 
endif 

" configure expanding of tabs for various file types
au BufRead,BufNewFile *.py set expandtab

" --------------------------------------------------------------------------------
" configure editor with tabs and nice stuff...
" --------------------------------------------------------------------------------
set expandtab           " enter spaces when tab is pressed
set textwidth=120       " break lines when line length increases
" Always keep 'tabstop' at 8, set 'softtabstop' and 'shiftwidth' to 4 (or 3 or whatever you prefer) and use 'noexpandtab'. Then Vim will use a mix of tabs and spaces, but typing and will behave like a tab appears every 4 (or 3) characters.

" Note: Setting 'tabstop' to any other value than 8 can make your file appear wrong in many places (e.g., when printing it).
set tabstop=8           " use 4 spaces to represent tab
set softtabstop=4
set shiftwidth=4        " number of spaces to use for auto indent
set autoindent          " copy indent from current line when starting a new line

" make backspaces more powerfull
set backspace=indent,eol,start

set ruler                           " show line and column number
syntax on               " syntax highlighting
set showcmd             " show (partial) command in status line
set langmenu=en_US

" Then you can paste with Ctrl + Shift + V , if you're in a terminal emulator like gnome-terminal (or select "Paste" from the right-click menu). You can also type :set paste in vim before you paste to disable automated indenting, etc. Then :set nopaste after you've pasted the content
" set paste

" how-to-break-a-line-in-vim-in-normal-mode then just press Ctrl-J whenever you want to split a line.
" noremap <NL> i<CR><ESC>